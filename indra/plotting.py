import matplotlib.pyplot as plt

from .common import VISUAL_EPS


def plot_circle(C, ax, color='k'):
    circ = plt.Circle((C.center.real, C.center.imag), C.radius, color=color)
    ax.add_artist(circ)


def plot_line(L, ax, color='k'):
    pass  # TODO: implement this


def plot_tiles(gens, circs, ax=None, plot_level=None, eps=VISUAL_EPS):
    """
    Plot tiles generated by set of Mobius transformations.

    :param gens: list of generating Mobius transformations
    :param circs: seed circles to start with
    :param ax: optional axis for plotting
    :param plot_level: plot only circles of this level, or None to plot all
    :param eps: minimum radius size to return
    :return: the axis used
    """
    if ax is None:
        fig = plt.figure()
        ax = fig.add_subplot(111, aspect='equal')

        ax.set_xlim((
            max(C.center.real + C.radius for C in circs),
            min(C.center.real - C.radius for C in circs)
        ))
        ax.set_ylim((
            max(C.center.imag + C.radius for C in circs),
            min(C.center.imag - C.radius for C in circs)
        ))

    colors = plt.cm.get_cmap('viridis', 20)

    # sort by level so that they plot in the correct order
    tiles = sorted(dfs_tiles(gens, circs, eps=eps), key=lambda x: x[1])
    if plot_level is not None:
        tiles = [x for x in tiles if x[1] == plot_level]
    for C, level in tiles:
        plot_circle(C, ax, color=colors(level))

    return ax


def dfs_tiles(gens, circs, eps):
    """
    Iterate through tiles with depth-first search.

    :param gens: list of generating Mobius transformations
    :param circs: seed circles to start with
    :param eps: minimum radius size to return
    :return: circle and corresponding level
    """
    for k in range(len(gens)):
        yield circs[k], 0
        yield from explore_tree_tiles(gens[k], k, circs[k], 1, gens, eps)


def explore_tree_tiles(X, l, C, level, gens, eps):
    n = len(gens)
    for k in range(l - 1, l + 2):
        Y = X(gens[k % n])
        new_circ = Y(C)
        yield new_circ, level
        if new_circ.radius > eps:
            yield from explore_tree_tiles(Y, k, C, level + 1, gens, eps)


def plot_limit_points(gens, circs, ax=None, eps=VISUAL_EPS):
    """
    Plot limit points of generating set of Mobius transformations.

    :param gens: list of generating Mobius transformations
    :param circs: seed circles to start with
    :param ax: optional axis for plotting
    :param eps: minimum radius size to return
    :return: the axis used
    """
    if ax is None:
        fig = plt.figure()
        ax = fig.add_subplot(111, aspect='equal')

    pts = list(dfs_limit_points(gens, circs, eps=eps))
    ax.scatter([x.real for x in pts], [x.imag for x in pts], marker='.', s=10)

    return ax


def dfs_limit_points(gens, circs, eps):
    """
    Iterate through limit points with depth-first search.

    :param gens: list of generating Mobius transformations
    :param circs: seed circles to start with
    :param eps: minimum radius size to return
    :return: point (complex number)
    """
    fps = [T.sink() for T in gens]
    for k in range(len(gens)):
        yield from explore_tree_limit(gens[k], k, circs[k], gens, fps, eps)


def explore_tree_limit(X, l, C, gens, fps, eps):
    n = len(gens)
    for k in range(l - 1, l + 2):
        Y = X(gens[k % n])
        if Y(C).radius < eps:
            yield Y(fps[k % n])
        else:
            yield from explore_tree_limit(Y, k, C, gens, fps, eps)
